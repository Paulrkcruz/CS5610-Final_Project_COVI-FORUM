{"ast":null,"code":"var _jsxFileName = \"/Users/kurtiscruz/Desktop/GitHub/CS5610-Final_Project_COVI-FORUM/src/models/home-screen.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { getAllThreads, searchAllThreads } from \"./thread\";\nimport ThreadList from \"../components/thread-list\";\nimport PageHead from \"../components/page-head\";\nimport { Link } from \"react-router-dom\";\nimport SearchBar from \"../components/search-bar\";\nimport ReactPaginate from \"react-paginate\";\nimport UserService from \"../services/user.service\";\nimport { Component } from \"react/cjs/react.production.min\";\nimport { render } from \"@testing-library/react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class HomeScreen extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      content: \"\"\n    };\n  }\n\n  componentDidMount() {\n    var _s = $RefreshSig$();\n\n    UserService.getPublicContent().then(response => {\n      this.setState({\n        content: response.data\n      });\n    }, _s(error => {\n      _s();\n\n      this.setState({\n        content: error.response && error.response.data || error.message || error.toString()\n      });\n      const [threads, setThreads] = useState([]);\n      const [searchThreads, setSearchThreads] = useState([]);\n      const [visibleThreads, setVisibleThreads] = useState([]);\n      const [dataAvailable, setDataAvailable] = useState(false);\n      const [searchDone, setSearchDone] = useState(false);\n      const [searchTerm, setSearchTerm] = useState(\"\");\n      const [currentPage, setCurrentPage] = useState(0);\n      const PER_PAGE = 10;\n      const offset = currentPage * PER_PAGE;\n\n      const triggerSearch = () => {\n        if (searchTerm !== \"\") {\n          onSearch(searchTerm);\n        } else {\n          setSearchThreads(threads);\n        }\n      };\n\n      useEffect(() => {\n        if (searchThreads.length > 0) {\n          // search list\n          const currentPageData = searchThreads.slice(offset, offset + PER_PAGE);\n          setVisibleThreads(currentPageData);\n        } else {\n          const currentPageData = threads.slice(offset, offset + PER_PAGE);\n          setVisibleThreads(currentPageData);\n        }\n      }, [threads, searchThreads, offset]);\n\n      function handlePageClick({\n        selected: selectedPage\n      }) {\n        setCurrentPage(selectedPage);\n      }\n\n      useEffect(() => {\n        getAllThreads().then(response => {\n          // Insert users\n          setThreads(response.data);\n          setDataAvailable(true);\n        }).catch(err => {\n          console.error(\"Load error. Please try again.\", err);\n        });\n      }, []);\n\n      const onSearch = term => {\n        setDataAvailable(false);\n        searchAllThreads(term).then(response => {\n          // Insert users\n          setSearchThreads(response.data);\n          setDataAvailable(true);\n          setSearchDone(true);\n        }).catch(err => {\n          console.error(\"Load error. Please try again.\", err);\n        });\n      };\n\n      const resetSearch = () => {\n        setSearchTerm(\"\");\n        setSearchThreads([]);\n        setSearchDone(false);\n      };\n    }, \"0eevAbaKln6FUHRum2z60FC6Mc0=\"));\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"jumbotron\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: this.state.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }, this);\n  }\n\n} //             render()\n//             {\n//                 return (\n//                     <div className=\"home-screen\">\n//                         <PageHead className=\"title\" title=\"Home\"/>\n//\n//                         <div className=\"container\">\n//                             {\n//                                 dataAvailable ? (\n//                                     <React.Fragment>\n//                                         <ReactPaginate\n//                                             previousLabel={\"← Previous\"}\n//                                             nextLabel={\"Next →\"}\n//                                             pageCount={Math.ceil(\n//                                                 (searchThreads.length > 0\n//                                                     ? searchThreads.length\n//                                                     : threads.length) / PER_PAGE\n//                                             )}\n//                                             onPageChange={handlePageClick}\n//                                             containerClassName={\"pagination\"}\n//                                             previousLinkClassName={\"pagination__link\"}\n//                                             nextLinkClassName={\"pagination__link\"}\n//                                             disabledClassName={\"pagination__link--disabled\"}\n//                                             activeClassName={\"pagination__link--active\"}\n//                                         />\n//                                         <ThreadList threads={visibleThreads}/>\n//                                         <ReactPaginate\n//                                             previousLabel={\"← Previous\"}\n//                                             nextLabel={\"Next →\"}\n//                                             pageCount={Math.ceil(\n//                                                 (searchThreads.length > 0\n//                                                     ? searchThreads.length\n//                                                     : threads.length) / PER_PAGE\n//                                             )}\n//                                             onPageChange={handlePageClick}\n//                                             containerClassName={\"pagination\"}\n//                                             previousLinkClassName={\"pagination__link\"}\n//                                             nextLinkClassName={\"pagination__link\"}\n//                                             disabledClassName={\"pagination__link--disabled\"}\n//                                             activeClassName={\"pagination__link--active\"}\n//                                         />\n//                                     </React.Fragment>\n//                                     // eslint-disable-next-line react/jsx-no-undef\n//                                 ) : (<Loader\n//                                         type=\"Puff\"\n//                                         color=\"#4f5d75\"\n//                                         height={100}\n//                                         width={100}\n//                                         className=\"loader\"/>\n//                                 )\n//                             }\n//                         </div>\n//\n//                         <div className=\"aside\">\n//                             <Link to=\"/thread/new_thread\">\n//                                 <div className=\"create-new-thread\">Create new thread</div>\n//                             </Link>\n//                             <SearchBar\n//                                 value={searchTerm}\n//                                 search={triggerSearch}\n//                                 onSearch={setSearchTerm}\n//                             />\n//                             {searchDone ? (\n//                                 <button onClick={resetSearch} className=\"search-info\">\n//                                     {searchThreads.length > 0 ? \"Reset search\" : \"No threads found\"}\n//                                 </button>\n//                             ) : (\n//                                 \"\"\n//                             )}\n//                         </div>\n//                     </div>\n//                 );\n//   };\n// }","map":{"version":3,"sources":["/Users/kurtiscruz/Desktop/GitHub/CS5610-Final_Project_COVI-FORUM/src/models/home-screen.js"],"names":["React","useEffect","useState","getAllThreads","searchAllThreads","ThreadList","PageHead","Link","SearchBar","ReactPaginate","UserService","Component","render","HomeScreen","constructor","props","state","content","componentDidMount","getPublicContent","then","response","setState","data","error","message","toString","threads","setThreads","searchThreads","setSearchThreads","visibleThreads","setVisibleThreads","dataAvailable","setDataAvailable","searchDone","setSearchDone","searchTerm","setSearchTerm","currentPage","setCurrentPage","PER_PAGE","offset","triggerSearch","onSearch","length","currentPageData","slice","handlePageClick","selected","selectedPage","catch","err","console","term","resetSearch"],"mappings":"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IADL,CACWC,QAAD,IAAc;AAChB;AACAS,UAAAA,gBAAgB,CAACT,QAAQ,CAACE,IAAV,CAAhB;AACAW,UAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACAE,UAAAA,aAAa,CAAC,IAAD,CAAb;AACH,SANL,EAOKe,KAPL,CAOYC,GAAD,IAAS;AACZC,UAAAA,OAAO,CAAC7B,KAAR,CAAc,+BAAd,EAA+C4B,GAA/C;AACH,SATL;AAUH,OAZD;;AAcA,YAAMG,WAAW,GAAG,MAAM;AACtBjB,QAAAA,aAAa,CAAC,EAAD,CAAb;AACAR,QAAAA,gBAAgB,CAAC,EAAD,CAAhB;AACAM,QAAAA,aAAa,CAAC,KAAD,CAAb;AACH,OAJD;AAKH,KA9EL;AA+ED;;AAGHxB,EAAAA,MAAM,GAAG;AACL,wBACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,6BACI;AAAQ,QAAA,SAAS,EAAC,WAAlB;AAAA,+BACI;AAAA,oBAAK,KAAKI,KAAL,CAAWC;AAAhB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAOH;;AAnGuD,C,CAuGxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { getAllThreads, searchAllThreads } from \"./thread\";\nimport ThreadList from \"../components/thread-list\";\nimport PageHead from \"../components/page-head\";\nimport { Link } from \"react-router-dom\";\nimport SearchBar from \"../components/search-bar\";\nimport ReactPaginate from \"react-paginate\";\nimport UserService from \"../services/user.service\";\nimport {Component} from \"react/cjs/react.production.min\";\nimport {render} from \"@testing-library/react\";\n\nexport default class HomeScreen extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      content: \"\"\n    };\n  }\n  componentDidMount() {\n    UserService.getPublicContent().then(\n        response => {\n          this.setState({\n            content: response.data\n          });\n        },\n        error => {\n            this.setState({\n                content:\n                    (error.response && error.response.data) ||\n                    error.message ||\n                    error.toString()\n            });\n\n            const [threads, setThreads] = useState([]);\n            const [searchThreads, setSearchThreads] = useState([]);\n            const [visibleThreads, setVisibleThreads] = useState([]);\n            const [dataAvailable, setDataAvailable] = useState(false);\n            const [searchDone, setSearchDone] = useState(false);\n            const [searchTerm, setSearchTerm] = useState(\"\");\n            const [currentPage, setCurrentPage] = useState(0);\n            const PER_PAGE = 10;\n            const offset = currentPage * PER_PAGE;\n            const triggerSearch = () => {\n\n                if (searchTerm !== \"\") {\n                    onSearch(searchTerm);\n                } else {\n                    setSearchThreads(threads);\n                }\n            };\n\n            useEffect(() => {\n                if (searchThreads.length > 0) {\n                    // search list\n                    const currentPageData = searchThreads.slice(offset, offset + PER_PAGE);\n                    setVisibleThreads(currentPageData);\n                } else {\n                    const currentPageData = threads.slice(offset, offset + PER_PAGE);\n                    setVisibleThreads(currentPageData);\n                }\n            }, [threads, searchThreads, offset]);\n\n            function handlePageClick({selected: selectedPage}) {\n                setCurrentPage(selectedPage);\n            }\n\n            useEffect(() => {\n                getAllThreads()\n                    .then((response) => {\n                        // Insert users\n                        setThreads(response.data);\n                        setDataAvailable(true);\n                    })\n                    .catch((err) => {\n                        console.error(\"Load error. Please try again.\", err);\n                    });\n            }, []);\n\n            const onSearch = (term) => {\n                setDataAvailable(false);\n                searchAllThreads(term)\n                    .then((response) => {\n                        // Insert users\n                        setSearchThreads(response.data);\n                        setDataAvailable(true);\n                        setSearchDone(true);\n                    })\n                    .catch((err) => {\n                        console.error(\"Load error. Please try again.\", err);\n                    });\n            };\n\n            const resetSearch = () => {\n                setSearchTerm(\"\");\n                setSearchThreads([]);\n                setSearchDone(false);\n            };\n        });\n  };\n\n\nrender() {\n    return (\n        <div className=\"container\">\n            <header className=\"jumbotron\">\n                <h3>{this.state.content}</h3>\n            </header>\n        </div>\n    );\n}\n}\n\n\n//             render()\n//             {\n//                 return (\n//                     <div className=\"home-screen\">\n//                         <PageHead className=\"title\" title=\"Home\"/>\n//\n//                         <div className=\"container\">\n//                             {\n//                                 dataAvailable ? (\n//                                     <React.Fragment>\n//                                         <ReactPaginate\n//                                             previousLabel={\"← Previous\"}\n//                                             nextLabel={\"Next →\"}\n//                                             pageCount={Math.ceil(\n//                                                 (searchThreads.length > 0\n//                                                     ? searchThreads.length\n//                                                     : threads.length) / PER_PAGE\n//                                             )}\n//                                             onPageChange={handlePageClick}\n//                                             containerClassName={\"pagination\"}\n//                                             previousLinkClassName={\"pagination__link\"}\n//                                             nextLinkClassName={\"pagination__link\"}\n//                                             disabledClassName={\"pagination__link--disabled\"}\n//                                             activeClassName={\"pagination__link--active\"}\n//                                         />\n//                                         <ThreadList threads={visibleThreads}/>\n//                                         <ReactPaginate\n//                                             previousLabel={\"← Previous\"}\n//                                             nextLabel={\"Next →\"}\n//                                             pageCount={Math.ceil(\n//                                                 (searchThreads.length > 0\n//                                                     ? searchThreads.length\n//                                                     : threads.length) / PER_PAGE\n//                                             )}\n//                                             onPageChange={handlePageClick}\n//                                             containerClassName={\"pagination\"}\n//                                             previousLinkClassName={\"pagination__link\"}\n//                                             nextLinkClassName={\"pagination__link\"}\n//                                             disabledClassName={\"pagination__link--disabled\"}\n//                                             activeClassName={\"pagination__link--active\"}\n//                                         />\n//                                     </React.Fragment>\n//                                     // eslint-disable-next-line react/jsx-no-undef\n//                                 ) : (<Loader\n//                                         type=\"Puff\"\n//                                         color=\"#4f5d75\"\n//                                         height={100}\n//                                         width={100}\n//                                         className=\"loader\"/>\n//                                 )\n//                             }\n//                         </div>\n//\n//                         <div className=\"aside\">\n//                             <Link to=\"/thread/new_thread\">\n//                                 <div className=\"create-new-thread\">Create new thread</div>\n//                             </Link>\n//                             <SearchBar\n//                                 value={searchTerm}\n//                                 search={triggerSearch}\n//                                 onSearch={setSearchTerm}\n//                             />\n//                             {searchDone ? (\n//                                 <button onClick={resetSearch} className=\"search-info\">\n//                                     {searchThreads.length > 0 ? \"Reset search\" : \"No threads found\"}\n//                                 </button>\n//                             ) : (\n//                                 \"\"\n//                             )}\n//                         </div>\n//                     </div>\n//                 );\n//   };\n// }\n"]},"metadata":{},"sourceType":"module"}