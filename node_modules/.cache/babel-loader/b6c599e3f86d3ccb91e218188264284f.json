{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nimport assertString from './util/assertString';\nimport merge from './util/merge';\nimport isByteLength from './isByteLength';\nimport isFQDN from './isFQDN';\nimport isIP from './isIP';\nvar default_email_options = {\n  allow_display_name: false,\n  require_display_name: false,\n  allow_utf8_local_part: true,\n  require_tld: true,\n  blacklisted_chars: '',\n  ignore_max_length: false\n};\n/* eslint-disable max-len */\n\n/* eslint-disable no-control-regex */\n\nvar splitNameAddress = /^([^\\x00-\\x1F\\x7F-\\x9F\\cX]+)<(.+)>$/i;\nvar emailUserPart = /^[a-z\\d!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]+$/i;\nvar gmailUserPart = /^[a-z\\d]+$/;\nvar quotedEmailUser = /^([\\s\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f\\x21\\x23-\\x5b\\x5d-\\x7e]|(\\\\[\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]))*$/i;\nvar emailUserUtf8Part = /^[a-z\\d!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+$/i;\nvar quotedEmailUserUtf8 = /^([\\s\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f\\x21\\x23-\\x5b\\x5d-\\x7e\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|(\\\\[\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))*$/i;\nvar defaultMaxEmailLength = 254;\n/* eslint-enable max-len */\n\n/* eslint-enable no-control-regex */\n\n/**\n * Validate display name according to the RFC2822: https://tools.ietf.org/html/rfc2822#appendix-A.1.2\n * @param {String} display_name\n */\n\nfunction validateDisplayName(display_name) {\n  var trim_quotes = display_name.match(/^\"(.+)\"$/i);\n  var display_name_without_quotes = trim_quotes ? trim_quotes[1] : display_name; // display name with only spaces is not valid\n\n  if (!display_name_without_quotes.trim()) {\n    return false;\n  } // check whether display name contains illegal character\n\n\n  var contains_illegal = /[\\.\";<>]/.test(display_name_without_quotes);\n\n  if (contains_illegal) {\n    // if contains illegal characters,\n    // must to be enclosed in double-quotes, otherwise it's not a valid display name\n    if (!trim_quotes) {\n      return false;\n    } // the quotes in display name must start with character symbol \\\n\n\n    var all_start_with_back_slash = display_name_without_quotes.split('\"').length === display_name_without_quotes.split('\\\\\"').length;\n\n    if (!all_start_with_back_slash) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport default function isEmail(str, options) {\n  assertString(str);\n  options = merge(options, default_email_options);\n\n  if (options.require_display_name || options.allow_display_name) {\n    var display_email = str.match(splitNameAddress);\n\n    if (display_email) {\n      var display_name;\n\n      var _display_email = _slicedToArray(display_email, 3);\n\n      display_name = _display_email[1];\n      str = _display_email[2]; // sometimes need to trim the last space to get the display name\n      // because there may be a space between display name and email address\n      // eg. myname <address@gmail.com>\n      // the display name is `myname` instead of `myname `, so need to trim the last space\n\n      if (display_name.endsWith(' ')) {\n        display_name = display_name.substr(0, display_name.length - 1);\n      }\n\n      if (!validateDisplayName(display_name)) {\n        return false;\n      }\n    } else if (options.require_display_name) {\n      return false;\n    }\n  }\n\n  if (!options.ignore_max_length && str.length > defaultMaxEmailLength) {\n    return false;\n  }\n\n  var parts = str.split('@');\n  var domain = parts.pop();\n  var user = parts.join('@');\n  var lower_domain = domain.toLowerCase();\n\n  if (options.domain_specific_validation && (lower_domain === 'gmail.com' || lower_domain === 'googlemail.com')) {\n    /*\n      Previously we removed dots for gmail addresses before validating.\n      This was removed because it allows `multiple..dots@gmail.com`\n      to be reported as valid, but it is not.\n      Gmail only normalizes single dots, removing them from here is pointless,\n      should be done in normalizeEmail\n    */\n    user = user.toLowerCase(); // Removing sub-address from username before gmail validation\n\n    var username = user.split('+')[0]; // Dots are not included in gmail length restriction\n\n    if (!isByteLength(username.replace('.', ''), {\n      min: 6,\n      max: 30\n    })) {\n      return false;\n    }\n\n    var _user_parts = username.split('.');\n\n    for (var i = 0; i < _user_parts.length; i++) {\n      if (!gmailUserPart.test(_user_parts[i])) {\n        return false;\n      }\n    }\n  }\n\n  if (options.ignore_max_length === false && (!isByteLength(user, {\n    max: 64\n  }) || !isByteLength(domain, {\n    max: 254\n  }))) {\n    return false;\n  }\n\n  if (!isFQDN(domain, {\n    require_tld: options.require_tld\n  })) {\n    if (!options.allow_ip_domain) {\n      return false;\n    }\n\n    if (!isIP(domain)) {\n      if (!domain.startsWith('[') || !domain.endsWith(']')) {\n        return false;\n      }\n\n      var noBracketdomain = domain.substr(1, domain.length - 2);\n\n      if (noBracketdomain.length === 0 || !isIP(noBracketdomain)) {\n        return false;\n      }\n    }\n  }\n\n  if (user[0] === '\"') {\n    user = user.slice(1, user.length - 1);\n    return options.allow_utf8_local_part ? quotedEmailUserUtf8.test(user) : quotedEmailUser.test(user);\n  }\n\n  var pattern = options.allow_utf8_local_part ? emailUserUtf8Part : emailUserPart;\n  var user_parts = user.split('.');\n\n  for (var _i2 = 0; _i2 < user_parts.length; _i2++) {\n    if (!pattern.test(user_parts[_i2])) {\n      return false;\n    }\n  }\n\n  if (options.blacklisted_chars) {\n    if (user.search(new RegExp(\"[\".concat(options.blacklisted_chars, \"]+\"), 'g')) !== -1) return false;\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/Users/kurtiscruz/Desktop/GitHub/CS5610-Final_Project_COVI-FORUM/node_modules/validator/es/lib/isEmail.js"],"names":["_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","o","minLen","_arrayLikeToArray","n","Object","prototype","toString","call","slice","constructor","name","Array","from","test","len","length","arr2","Symbol","iterator","_arr","_n","_d","_e","undefined","_i","_s","next","done","push","value","err","isArray","assertString","merge","isByteLength","isFQDN","isIP","default_email_options","allow_display_name","require_display_name","allow_utf8_local_part","require_tld","blacklisted_chars","ignore_max_length","splitNameAddress","emailUserPart","gmailUserPart","quotedEmailUser","emailUserUtf8Part","quotedEmailUserUtf8","defaultMaxEmailLength","validateDisplayName","display_name","trim_quotes","match","display_name_without_quotes","trim","contains_illegal","all_start_with_back_slash","split","isEmail","str","options","display_email","_display_email","endsWith","substr","parts","domain","pop","user","join","lower_domain","toLowerCase","domain_specific_validation","username","replace","min","max","_user_parts","allow_ip_domain","startsWith","noBracketdomain","pattern","user_parts","_i2","search","RegExp","concat"],"mappings":"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","sourcesContent":["function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport assertString from './util/assertString';\nimport merge from './util/merge';\nimport isByteLength from './isByteLength';\nimport isFQDN from './isFQDN';\nimport isIP from './isIP';\nvar default_email_options = {\n  allow_display_name: false,\n  require_display_name: false,\n  allow_utf8_local_part: true,\n  require_tld: true,\n  blacklisted_chars: '',\n  ignore_max_length: false\n};\n/* eslint-disable max-len */\n\n/* eslint-disable no-control-regex */\n\nvar splitNameAddress = /^([^\\x00-\\x1F\\x7F-\\x9F\\cX]+)<(.+)>$/i;\nvar emailUserPart = /^[a-z\\d!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]+$/i;\nvar gmailUserPart = /^[a-z\\d]+$/;\nvar quotedEmailUser = /^([\\s\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f\\x21\\x23-\\x5b\\x5d-\\x7e]|(\\\\[\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]))*$/i;\nvar emailUserUtf8Part = /^[a-z\\d!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+$/i;\nvar quotedEmailUserUtf8 = /^([\\s\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f\\x21\\x23-\\x5b\\x5d-\\x7e\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|(\\\\[\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))*$/i;\nvar defaultMaxEmailLength = 254;\n/* eslint-enable max-len */\n\n/* eslint-enable no-control-regex */\n\n/**\n * Validate display name according to the RFC2822: https://tools.ietf.org/html/rfc2822#appendix-A.1.2\n * @param {String} display_name\n */\n\nfunction validateDisplayName(display_name) {\n  var trim_quotes = display_name.match(/^\"(.+)\"$/i);\n  var display_name_without_quotes = trim_quotes ? trim_quotes[1] : display_name; // display name with only spaces is not valid\n\n  if (!display_name_without_quotes.trim()) {\n    return false;\n  } // check whether display name contains illegal character\n\n\n  var contains_illegal = /[\\.\";<>]/.test(display_name_without_quotes);\n\n  if (contains_illegal) {\n    // if contains illegal characters,\n    // must to be enclosed in double-quotes, otherwise it's not a valid display name\n    if (!trim_quotes) {\n      return false;\n    } // the quotes in display name must start with character symbol \\\n\n\n    var all_start_with_back_slash = display_name_without_quotes.split('\"').length === display_name_without_quotes.split('\\\\\"').length;\n\n    if (!all_start_with_back_slash) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport default function isEmail(str, options) {\n  assertString(str);\n  options = merge(options, default_email_options);\n\n  if (options.require_display_name || options.allow_display_name) {\n    var display_email = str.match(splitNameAddress);\n\n    if (display_email) {\n      var display_name;\n\n      var _display_email = _slicedToArray(display_email, 3);\n\n      display_name = _display_email[1];\n      str = _display_email[2];\n\n      // sometimes need to trim the last space to get the display name\n      // because there may be a space between display name and email address\n      // eg. myname <address@gmail.com>\n      // the display name is `myname` instead of `myname `, so need to trim the last space\n      if (display_name.endsWith(' ')) {\n        display_name = display_name.substr(0, display_name.length - 1);\n      }\n\n      if (!validateDisplayName(display_name)) {\n        return false;\n      }\n    } else if (options.require_display_name) {\n      return false;\n    }\n  }\n\n  if (!options.ignore_max_length && str.length > defaultMaxEmailLength) {\n    return false;\n  }\n\n  var parts = str.split('@');\n  var domain = parts.pop();\n  var user = parts.join('@');\n  var lower_domain = domain.toLowerCase();\n\n  if (options.domain_specific_validation && (lower_domain === 'gmail.com' || lower_domain === 'googlemail.com')) {\n    /*\n      Previously we removed dots for gmail addresses before validating.\n      This was removed because it allows `multiple..dots@gmail.com`\n      to be reported as valid, but it is not.\n      Gmail only normalizes single dots, removing them from here is pointless,\n      should be done in normalizeEmail\n    */\n    user = user.toLowerCase(); // Removing sub-address from username before gmail validation\n\n    var username = user.split('+')[0]; // Dots are not included in gmail length restriction\n\n    if (!isByteLength(username.replace('.', ''), {\n      min: 6,\n      max: 30\n    })) {\n      return false;\n    }\n\n    var _user_parts = username.split('.');\n\n    for (var i = 0; i < _user_parts.length; i++) {\n      if (!gmailUserPart.test(_user_parts[i])) {\n        return false;\n      }\n    }\n  }\n\n  if (options.ignore_max_length === false && (!isByteLength(user, {\n    max: 64\n  }) || !isByteLength(domain, {\n    max: 254\n  }))) {\n    return false;\n  }\n\n  if (!isFQDN(domain, {\n    require_tld: options.require_tld\n  })) {\n    if (!options.allow_ip_domain) {\n      return false;\n    }\n\n    if (!isIP(domain)) {\n      if (!domain.startsWith('[') || !domain.endsWith(']')) {\n        return false;\n      }\n\n      var noBracketdomain = domain.substr(1, domain.length - 2);\n\n      if (noBracketdomain.length === 0 || !isIP(noBracketdomain)) {\n        return false;\n      }\n    }\n  }\n\n  if (user[0] === '\"') {\n    user = user.slice(1, user.length - 1);\n    return options.allow_utf8_local_part ? quotedEmailUserUtf8.test(user) : quotedEmailUser.test(user);\n  }\n\n  var pattern = options.allow_utf8_local_part ? emailUserUtf8Part : emailUserPart;\n  var user_parts = user.split('.');\n\n  for (var _i2 = 0; _i2 < user_parts.length; _i2++) {\n    if (!pattern.test(user_parts[_i2])) {\n      return false;\n    }\n  }\n\n  if (options.blacklisted_chars) {\n    if (user.search(new RegExp(\"[\".concat(options.blacklisted_chars, \"]+\"), 'g')) !== -1) return false;\n  }\n\n  return true;\n}"]},"metadata":{},"sourceType":"module"}