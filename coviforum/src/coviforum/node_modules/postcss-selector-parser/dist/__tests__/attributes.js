"use strict";

var _process = _interopRequireDefault(require("process"));

var _attribute = _interopRequireDefault(require("../selectors/attribute"));

var _helpers = require("./util/helpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_process.default.throwDeprecation = true;
(0, _helpers.test)('attribute selector', '[href]', function (t, tree) {
  t.deepEqual(tree.nodes[0].nodes[0].attribute, 'href');
  t.deepEqual(tree.nodes[0].nodes[0].type, 'attribute');
  t.falsy(tree.nodes[0].nodes[0].quoted);
});
(0, _helpers.test)('attribute selector spaces (before)', '[  href]', function (t, tree) {
  t.deepEqual(tree.nodes[0].nodes[0].attribute, 'href');
  t.deepEqual(tree.nodes[0].nodes[0].spaces.attribute.before, '  ');
  t.deepEqual(tree.nodes[0].nodes[0].type, 'attribute');
  t.falsy(tree.nodes[0].nodes[0].quoted);
});
(0, _helpers.test)('attribute selector spaces (after)', '[href  ]', function (t, tree) {
  t.deepEqual(tree.nodes[0].nodes[0].attribute, 'href');
  t.deepEqual(tree.nodes[0].nodes[0].spaces.attribute.after, '  ');
  t.deepEqual(tree.nodes[0].nodes[0].type, 'attribute');
  t.falsy(tree.nodes[0].nodes[0].quoted);
});
(0, _helpers.test)('attribute selector spaces with namespace (both)', '[  foo|bar   ]', function (t, tree) {
  t.deepEqual(tree.nodes[0].nodes[0].ns, 'foo');
  t.deepEqual(tree.nodes[0].nodes[0].attribute, 'bar');
  t.deepEqual(tree.nodes[0].nodes[0].spaces.attribute.before, '  ');
  t.deepEqual(tree.nodes[0].nodes[0].spaces.attribute.after, '   ');
  t.deepEqual(tree.nodes[0].nodes[0].type, 'attribute');
  t.falsy(tree.nodes[0].nodes[0].quoted);
});
(0, _helpers.test)('attribute selector spaces (both)', '[  href   ]', function (t, tree) {
  t.deepEqual(tree.nodes[0].nodes[0].attribute, 'href');
  t.deepEqual(tree.nodes[0].nodes[0].spaces.attribute.before, '  ');
  t.deepEqual(tree.nodes[0].nodes[0].spaces.attribute.after, '   ');
  t.deepEqual(tree.nodes[0].nodes[0].type, 'attribute');
  t.falsy(tree.nodes[0].nodes[0].quoted);
});
(0, _helpers.test)('multiple attribute selectors', '[href][class][name]', function (t, tree) {
  t.deepEqual(tree.nodes[0].nodes[0].attribute, 'href');
  t.deepEqual(tree.nodes[0].nodes[1].attribute, 'class');
  t.deepEqual(tree.nodes[0].nodes[2].attribute, 'name');
});
(0, _helpers.test)('select elements with or without a namespace', '[*|href]', function (t, tree) {
  t.deepEqual(tree.nodes[0].nodes[0].namespace, '*');
  t.deepEqual(tree.nodes[0].nodes[0].attribute, 'href');
});
(0, _helpers.test)('namespace with escapes', '[\\31 \\#\\32 |href]', function (t, tree) {
  var attr = tree.nodes[0].nodes[0];
  t.deepEqual(attr.namespace, '1#2');
  t.deepEqual(attr.raws.namespace, '\\31 \\#\\32 ');
  attr.namespace = "foo";
  t.deepEqual(attr.namespace, 'foo');
  t.deepEqual(attr.raws.namespace, undefined);
  attr.namespace = "1";
  t.deepEqual(attr.namespace, '1');
  t.deepEqual(attr.raws.namespace, '\\31');
});
(0, _helpers.test)('attribute selector with a empty value', '[href=""]', function (t, tree) {
  t.deepEqual(tree.nodes[0].nodes[0].attribute, 'href');
  t.deepEqual(tree.nodes[0].nodes[0].operator, '=');
  t.deepEqual(tree.nodes[0].nodes[0].value, '');
  t.true(tree.nodes[0].nodes[0].quoted);
});
(0, _helpers.test)('attribute selector with a value', '[name=james]', function (t, tree) {
  t.deepEqual(tree.nodes[0].nodes[0].attribute, 'name');
  t.deepEqual(tree.nodes[0].nodes[0].operator, '=');
  t.deepEqual(tree.nodes[0].nodes[0].value, 'james');
  t.falsy(tree.nodes[0].nodes[0].quoted);
});
(0, _helpers.test)('attribute selector with quoted value', '[name="james"]', function (t, tree) {
  var attr = tree.nodes[0].nodes[0];
  t.deepEqual(attr.attribute, 'name');
  t.deepEqual(attr.operator, '=');
  t.deepEqual(attr.value, 'james');
  t.deepEqual(attr.quoteMark, '"');
  t.truthy(attr.quoted);
  t.deepEqual(attr.getQuotedValue(), '"james"');
});
(0, _helpers.test)('attribute selector with escaped quote', '[title="Something \\"weird\\""]', function (t, tree) {
  var attr = tree.nodes[0].nodes[0];
  t.deepEqual(attr.value, 'Something "weird"');
  t.deepEqual(attr.getQuotedValue(), '\"Something \\"weird\\"\"');
  t.deepEqual(attr.getQuotedValue({
    smart: true
  }), '\'Something "weird"\'');
  t.deepEqual(attr.getQuotedValue({
    quoteMark: null
  }), 'Something\\ \\"weird\\"');
  t.deepEqual(attr.quoteMark, '"');
  t.truthy(attr.quoted);
  t.deepEqual(attr.raws.value, '"Something \\"weird\\""');
  t.deepEqual(tree.toString(), '[title="Something \\"weird\\""]');
});
(0, _helpers.test)('attribute selector with escaped colon', '[ng\\:cloak]', function (t, tree) {
  t.deepEqual(tree.toString(), '[ng\\:cloak]');
  var attr = tree.nodes[0].nodes[0];
  t.deepEqual(attr.raws.attribute, 'ng\\:cloak');
  t.deepEqual(attr.attribute, 'ng:cloak');
});
(0, _helpers.test)('attribute selector with short hex escape', '[ng\\3a cloak]', function (t, tree) {
  t.deepEqual(tree.toString(), '[ng\\3a cloak]');
  var attr = tree.nodes[0].nodes[0];
  t.deepEqual(attr.raws.attribute, 'ng\\3a cloak');
  t.deepEqual(attr.attribute, 'ng:cloak');
});
(0, _helpers.test)('attribute selector with hex escape', '[ng\\00003acloak]', function (t, tree) {
  t.deepEqual(tree.toString(), '[ng\\00003acloak]');
  var attr = tree.nodes[0].nodes[0];
  t.deepEqual(attr.raws.attribute, 'ng\\00003acloak');
  t.deepEqual(attr.attribute, 'ng:cloak');
});
(0, _helpers.test)('assign attribute name requiring escape', '[ng\\:cloak]', function (t, tree) {
  var attr = tree.nodes[0].nodes[0];
  attr.attribute = "ng:foo";
  t.deepEqual(attr.raws.attribute, 'ng\\:foo');
  t.deepEqual(attr.attribute, 'ng:foo');
  t.deepEqual(tree.toString(), '[ng\\:foo]');
});
(0, _helpers.test)('multiple attribute selectors + combinator', '[href][class][name] h1 > h2', function (t, tree) {
  t.deepEqual(tree.nodes[0].nodes[2].attribute, 'name');
  t.deepEqual(tree.nodes[0].nodes[3].value, ' ');
  t.deepEqual(tree.nodes[0].nodes[5].value, '>');
  t.deepEqual(tree.nodes[0].nodes[6].value, 'h2');
});
(0, _helpers.test)('attribute, class, combinator', '[href] > h2.test', function (t, tree) {
  t.deepEqual(tree.nodes[0].nodes[0].attribute, 'href');
  t.deepEqual(tree.nodes[0].nodes[1].value, '>');
  t.deepEqual(tree.nodes[0].nodes[2].value, 'h2');
  t.deepEqual(tree.nodes[0].nodes[3].value, 'test');
});
(0, _helpers.test)('attribute selector with quoted value & combinator', '[name="james"] > h1', function (t, tree) {
  t.deepEqual(tree.nodes[0].nodes[0].