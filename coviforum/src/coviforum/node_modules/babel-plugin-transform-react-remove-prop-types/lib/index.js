"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _isAnnotatedForRemoval = _interopRequireDefault(require("./isAnnotatedForRemoval"));

var _isStatelessComponent = _interopRequireDefault(require("./isStatelessComponent"));

var _remove = _interopRequireDefault(require("./remove"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function isPathReactClass(path, globalOptions) {
  var node = path.node;
  var matchers = globalOptions.classNameMatchers;

  if (path.matchesPattern('React.Component') || path.matchesPattern('React.PureComponent')) {
    return true;
  }

  if (node && (node.name === 'Component' || node.name === 'PureComponent')) {
    return true;
  }

  if (node && matchers && matchers.test(node.name)) {
    return true;
  }

  return false;
}

function isReactClass(superClass, scope, globalOptions) {
  if (!superClass.node) {
    return false;
  }

  var answer = false;

  if (isPathReactClass(superClass, globalOptions)) {
    answer = true;
  } else if (superClass.node.name) {
    // Check for inheritance
    var className = superClass.node.name;
    var binding = scope.getBinding(className);

    if (!binding) {
      answer = false;
    } else {
      var bindingSuperClass = binding.path.get('superClass');

      if (isPathReactClass(bindingSuperClass, globalOptions)) {
        answer = true;
      }
    }
  }

  return answer;
}

function areSetsEqual(set1, set2) {
  if (set1 === set2) {
    return true;
  }

  if (set1.size !== set2.size) {
    return false;
  }

  return !Array.from(set1).some(function (item) {
    return !set2.has(item);
  });
}

function memberExpressionRootIdentifier(path) {
  // Traverse up to the parent before the topmost member expression, and then
  // traverse back down to find the topmost identifier. It seems like there
  // might be a better way to do this.
  var parent = path.findParent(function (p) {
    return !p.isMemberExpression();
  });
  var type = parent.node.type;
  var memberExpression;

  if (type === 'ObjectProperty') {
    // The topmost MemberExpression's parent is an object property, so the
    // topmost MemberExpression should be the value.
    memberExpression = parent.get('value');
  }

  if (!memberExpression || memberExpression.type !== 'MemberExpression') {
    // This case is currently unhandled by this plugin.
    return null;
  } // We have a topmost MemberExpression now, so we want to traverse down the
  // left half untli we no longer see MemberExpressions. This node will give us
  // our leftmost identifier.


  while (memberExpression.node.object.type === 'MemberExpression') {
    memberExpression = memberExpression.get('object');
  }

  return memberExpression.get('object');
}

function _default(api) {
  var template = api.template,
      types = api.types,
      traverse = api.traverse;
  var nestedIdentifiers = new Set();
  var removedPaths = new WeakSet();
  var collectNestedIdentifiers = {
    Identifier: function Identifier(path) {
      if (path.parent.type === 'MemberExpression') {
        // foo.bar
        var root = memberExpressionRootIdentifier(path);

        if (root) {
          nestedIdentifiers.add(root.node.name);
        }

        return;
      }

      if (path.parent.type === 'ObjectProperty' && (path.parent.key === path.node || path.parent.shorthand)) {
        // { foo: 'bar' }
        // { foo }
        return;
      }

      nestedIdentifiers.add(path.node.name);
    }
  };
  return {
    visitor: {
      Program: function Program(programPath, state) {
        var ignoreFilenames;
        var classNameMatchers;

        if (state.opts.ignoreFilenames) {
          ignoreFilenames = new RegExp(state.opts.ignoreFilenames.join('|'), 'i');
        } else {
          ignoreFilenames = undefined;
        }

        if (state.opts.classNameMatchers) {
          classNameMatchers = new RegExp(state.opts.classNameMatchers.join('|'));
        } else {
          classNameMatchers = undefined;
        }

        var globalOptions = {
          visitedKey: "transform-react-remove-prop-types".concat(Date.now()),
          unsafeWrapTemplate: template("\n              if (process.env.NODE_ENV !== \"production\") {\n                NODE;\n              }\n            ", {
            placeholderPattern: /^NODE$/
          }),
          wrapTemplate: function wrapTemplate(_ref) {
            var LEFT = _ref.LEFT,
                RIGHT = _ref.RIGHT;
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            var _options$as = options.as,
                as = _options$as === void 0 ? 'assignmentExpression' : _options$as;
            var right = template.expression("\n                process.env.NODE_ENV !== \"production\" ? RIGHT : {}\n              ", {
              placeholderPattern: /^(LEFT|RIGHT)$/
            })({
              RIGHT: RIGHT
            });

            switch (as) {
              case 'variableDeclarator':
                return types.variableDeclarator(LEFT, right);

              case 'assignmentExpression':
                return types.assignmentExpression('=', LEFT, right);

              default:
                throw new Error("unrecognized template type 