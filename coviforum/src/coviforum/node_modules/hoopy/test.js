/* eslint-env mocha */
/* eslint-disable max-nested-callbacks */

'use strict'

const { assert } = require('chai')
const Hoopy = require('.')

test('interface is correct', () => {
  assert.isFunction(Hoopy)
  assert.lengthOf(Hoopy, 1)
  assert.throws(() => new Hoopy(0))
  assert.doesNotThrow(() => new Hoopy(1))
  assert.throws(() => new Hoopy(-1))
  assert.throws(() => new Hoopy(1).push())
  assert.throws(() => new Hoopy(1).pop())
  assert.throws(() => new Hoopy(1).shift())
  assert.throws(() => new Hoopy(1).unshift())
})

suite('instantiate, size=1:', () => {
  let hoopy

  setup(() => {
    hoopy = new Hoopy(1)
  })

  test('instance is array', () => {
    assert.isTrue(Array.isArray(hoopy))
  })

  test('length is correct', () => {
    assert.equal(hoopy.length, 1)
  })

  test('[0] is undefined', () => {
    assert.isUndefined(hoopy[0])
  })

  test('[1] is undefined', () => {
    assert.isUndefined(hoopy[1])
  })

  test('[-1] is undefined', () => {
    assert.isUndefined(hoopy[-1])
  })

  test('grow method is implemented', () => {
    assert.isFunction(hoopy.grow)
    assert.lengthOf(hoopy.grow, 1)
  })

  test('grow throws if by=0', () => {
    assert.throws(() => hoopy.grow(0))
  })

  suite('assign to [0]:', () => {
    setup(() => {
      hoopy[0] = 'foo'
    })

    test('[0] is set correctl