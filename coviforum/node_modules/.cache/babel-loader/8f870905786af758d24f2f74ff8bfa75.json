{"ast":null,"code":"const mongoClient = require(\"../configs/mongoClient\");\n\nconst User = require(\"../models/user\"); // Reference: https://bezkoder.com/node-js-mongodb-auth-jwt/\n// Read User information\n\n\nconst readUsers = () => {\n  return new Promise((resolve, reject) => {\n    mongoClient.getDatabase().connection.collection(\"user\").find({}, {\n      projection: {\n        _id: 0,\n        hashed_password: 0\n      }\n    }).toArray((err, docs) => {\n      if (err) {\n        console.error(\"error: readUsers\", err);\n        reject(\"Failed to get all users from database\");\n      } else {\n        resolve(docs);\n      }\n    });\n  });\n};\n\nconst getAmountOfUsers = () => {\n  return new Promise((resolve, reject) => {\n    mongoClient.getDatabase().connection.collection(\"user\").countDocuments({}).then(count => {\n      resolve({\n        userCount: count\n      });\n    }).catch(err => {\n      reject(err);\n    });\n  });\n}; // only read active users\n// don't return password field\n\n\nconst readUser = doc => {\n  return new Promise((resolve, reject) => {\n    mongoClient.getDatabase().connection.collection(\"user\").find(Object.assign({\n      active: 1\n    }, doc), {\n      projection: {\n        _id: 0,\n        hashed_password: 0\n      }\n    }).toArray((err, docs) => {\n      if (err) {\n        console.error(\"error: readUser\", err);\n        reject(err);\n      } else {\n        resolve(docs);\n      }\n    });\n  });\n};\n\nconst addUser = doc => {\n  return new Promise((resolve, reject) => {\n    mongoClient.getDatabase().connection.collection(\"user\").insertOne(Object.assign({\n      active: 1\n    }, doc)).then((result, err) => {\n      if (err) {\n        console.error(\"error: addUser\", err);\n        reject(\"Failed to add user to database\");\n      } else {\n        // The mongo success result is on the following data structure\n        // result.ops: this is an array\n        if (result.ops && result.ops.length && result.ops.length > 0) {\n          // Create user of result and remove password\n          const user = User.from(result.ops[0]); // remove password before sending back\n\n          user.hashed_password = undefined; // Return inserted user\n\n          resolve(user);\n        } else {\n          resolve(undefined);\n        }\n      }\n    });\n  });\n};\n/*\n  location: structure to recognize the data to update on for example id\n  updateValue: json structure to update\n  Example of updateValue: { $set: { test2: 2 } }\n*/\n\n\nconst updateUser = (location, updateValue) => {\n  return new Promise((resolve, reject) => {\n    mongoClient.getDatabase().connection.collection(\"user\").updateOne(location, updateValue).then((result, err) => {\n      if (err) {\n        console.error(\"error: updateUser\", err);\n      }\n\n      if (result.result.ok && result.result.ok > 0) {\n        resolve(result);\n      } else {\n        reject();\n      }\n    });\n  });\n}; // We will never delete a user/post just set the account to not active\n\n\nconst deleteUser = location => {\n  return new Promise((resolve, reject) => {\n    updateUser(location, {\n      $set: {\n        active: 0\n      }\n    }).then(resolve).catch(reject);\n  });\n}; // Export all database functions\n\n\nmodule.exports = {\n  readUsers,\n  addUser,\n  updateUser,\n  readUser,\n  deleteUser,\n  getAmountOfUsers\n};","map":{"version":3,"sources":["/Users/kurtiscruz/Desktop/GitHub/CS5610-Final_Project_COVI-FORUM/coviforum/server/controllers/user.controller.js"],"names":["mongoClient","require","User","readUsers","Promise","resolve","reject","getDatabase","connection","collection","find","projection","_id","hashed_password","toArray","err","docs","console","error","getAmountOfUsers","countDocuments","then","count","userCount","catch","readUser","doc","Object","assign","active","addUser","insertOne","result","ops","length","user","from","undefined","updateUser","location","updateValue","updateOne","ok","deleteUser","$set","module","exports"],"mappings":"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","sourcesContent":["const mongoClient = require(\"../configs/mongoClient\");\nconst User = require(\"../models/user\");\n// Reference: https://bezkoder.com/node-js-mongodb-auth-jwt/\n\n// Read User information\nconst readUsers = () => {\n  return new Promise((resolve, reject) => {\n    mongoClient\n      .getDatabase()\n      .connection.collection(\"user\")\n      .find({}, { projection: { _id: 0, hashed_password: 0 } })\n      .toArray((err, docs) => {\n        if (err) {\n          console.error(\"error: readUsers\", err);\n          reject(\"Failed to get all users from database\");\n        } else {\n          resolve(docs);\n        }\n      });\n  });\n};\n\nconst getAmountOfUsers = () => {\n  return new Promise((resolve, reject) => {\n    mongoClient\n      .getDatabase()\n      .connection.collection(\"user\")\n      .countDocuments({})\n      .then((count) => {\n        resolve({ userCount: count });\n      })\n      .catch((err) => {\n        reject(err);\n      });\n  });\n};\n\n// only read active users\n// don't return password field\nconst readUser = (doc) => {\n  return new Promise((resolve, reject) => {\n    mongoClient\n      .getDatabase()\n      .connection.collection(\"user\")\n      .find(Object.assign({ active: 1 }, doc), {\n        projection: { _id: 0, hashed_password: 0 },\n      })\n      .toArray((err, docs) => {\n        if (err) {\n          console.error(\"error: readUser\", err);\n          reject(err);\n        } else {\n          resolve(docs);\n        }\n      });\n  });\n};\n\nconst addUser = (doc) => {\n  return new Promise((resolve, reject) => {\n    mongoClient\n      .getDatabase()\n      .connection.collection(\"user\")\n      .insertOne(Object.assign({ active: 1 }, doc))\n      .then((result, err) => {\n        if (err) {\n          console.error(\"error: addUser\", err);\n          reject(\"Failed to add user to database\");\n        } else {\n          // The mongo success result is on the following data structure\n          // result.ops: this is an array\n          if (result.ops && result.ops.length && result.ops.length > 0) {\n            // Create user of result and remove password\n            const user = User.from(result.ops[0]);\n            // remove password before sending back\n            user.hashed_password = undefined;\n            // Return inserted user\n            resolve(user);\n          } else {\n            resolve(undefined);\n          }\n        }\n      });\n  });\n};\n\n/*\n  location: structure to recognize the data to update on for example id\n  updateValue: json structure to update\n  Example of updateValue: { $set: { test2: 2 } }\n*/\nconst updateUser = (location, updateValue) => {\n  return new Promise((resolve, reject) => {\n    mongoClient\n      .getDatabase()\n      .connection.collection(\"user\")\n      .updateOne(location, updateValue)\n      .then((result, err) => {\n        if (err) {\n          console.error(\"error: updateUser\", err);\n        }\n        if (result.result.ok && result.result.ok > 0) {\n          resolve(result);\n        } else {\n          reject();\n        }\n      });\n  });\n};\n\n// We will never delete a user/post just set the account to not active\nconst deleteUser = (location) => {\n  return new Promise((resolve, reject) => {\n    updateUser(location, { $set: { active: 0 } })\n      .then(resolve)\n      .catch(reject);\n  });\n};\n\n// Export all database functions\nmodule.exports = {\n  readUsers,\n  addUser,\n  updateUser,\n  readUser,\n  deleteUser,\n  getAmountOfUsers,\n};\n"]},"metadata":{},"sourceType":"script"}