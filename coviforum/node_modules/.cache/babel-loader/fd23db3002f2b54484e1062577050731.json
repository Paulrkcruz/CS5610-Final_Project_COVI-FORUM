{"ast":null,"code":"const express = require(\"express\");\n\nconst boardController = require(\"../controllers/board.controller\");\n\nconst locationController = require(\"../controllers/location.controller\");\n\nconst Board = require(\"../models/board\");\n\nconst Post = require(\"../models/msgs\");\n\nconst router = express.Router();\n\nconst helper = require(\"./helper\");\n\nconst addBoard = async (req, res) => {\n  if (req && req.body) {\n    // Do more validation -> check if userId exists\n    if (!req.body.userId || req.body.userId && req.body.userId.length !== 36) {\n      return res.status(400).send(\"UserId is not valid\"); // Invalid ID length\n    } else {\n      const idExists = await helper.doesUserExistByUserId(req.body.userId);\n\n      if (!idExists) {\n        return res.status(400).send(\"UserId is not valid\"); // ID doesn't exist\n      }\n    }\n\n    let tags = [];\n\n    if (req.body.tags) {\n      try {\n        tags = JSON.parse(req.body.tags);\n      } catch (error) {\n        console.error(\"Failed to parse tags\", req.body.tags);\n      }\n    } // Create board object\n\n\n    const board = new Board(req.body.subject, req.body.userId, tags); // create first post\n\n    const post = new Post(board.id, req.body.message || \"\", req.body.userId); // push post into board\n\n    board.posts.push(post); // Add user and return the added user\n\n    boardController.addBoard(board).then(board => {\n      res.json(board);\n    }).catch(err => {\n      // Failed to add board\n      res.status(500); // 500 Internal Server Error\n\n      res.json({\n        \"status-code\": 500,\n        message: err || \"failed to add board\"\n      });\n    });\n  } else {\n    // No form data found\n    res.status(500); // 500 Internal Server Error\n\n    res.json({\n      \"status-code\": 500,\n      message: \"No request body found\"\n    });\n  }\n};\n\nconst getAllBoards = (req, res) => {\n  // read entire table\n  boardController.readBoards().then(boards => {\n    res.json(boards);\n  }).catch(err => {\n    // Database call failed return 500 error\n    res.status(500); // 500 Internal Server Error\n\n    res.json({\n      \"status-code\": 500,\n      message: err || \"failed request\"\n    });\n  });\n};\n\nconst getOneBoard = async (req, res) => {\n  const id = req.query.id;\n\n  if (!id || id.length !== 36) {\n    return res.status(400).send(\"id is not valid\"); // Invalid ID length\n  } else {\n    const idExists = await helper.doesBoardExistByBoardId(id);\n\n    if (!idExists) {\n      return res.status(400).send(\"id is not valid\"); // ID doesn't exist\n    }\n  } // read entire table\n\n\n  boardController.readBoard(id).then(board => {\n    res.json(board);\n  }).catch(err => {\n    // Database call failed return 500 error\n    res.status(500); // 500 Internal Server Error\n\n    res.json({\n      \"status-code\": 500,\n      message: err || \"failed request\"\n    });\n  });\n};\n\nconst addPost = async (req, res) => {\n  if (req && req.body) {\n    // Do more validation -> check if userId exists\n    if (!req.body.userId || req.body.userId && req.body.userId.length !== 36) {\n      return res.status(400).send(\"UserId is not valid\"); // Invalid ID length\n    } else {\n      const idExists = await helper.doesUserExistByUserId(req.body.userId);\n\n      if (!idExists) {\n        return res.status(400).send(\"UserId is not valid\"); // ID doesn't exist\n      }\n    } // Do more validation -> check if boardID exists\n\n\n    if (!req.body.boardId || req.body.userId && req.body.userId.length !== 36) {\n      return res.status(400).send(\"boardID is not valid\"); // Invalid ID length\n    } else {\n      const idExists = await helper.doesBoardExistByBoardId(req.body.boardId);\n\n      if (!idExists) {\n        return res.status(400).send(\"boardID is not valid\"); // ID doesn't exist\n      }\n    } // insert location in location database\n\n\n    if (req.body.location) {\n      try {\n        const location = JSON.parse(req.body.location);\n\n        if (location && location.long && location.lat) {\n          await locationController.addLocation(location.long, location.lat);\n        }\n      } catch (error) {\n        console.error(\"Failed to parse location\");\n      }\n    } // Create post object\n\n\n    const post = new Post(req.body.boardId, req.body.message || \"\", req.body.userId); // Add user and return the added user\n\n    boardController.addPost(post).then(post => {\n      res.json(post);\n    }).catch(err => {\n      // Failed to add Post\n      res.status(500); // 500 Internal Server Error\n\n      res.json({\n        \"status-code\": 500,\n        message: err || \"failed to add post\"\n      });\n    });\n  } else {\n    // No form data found\n    res.status(500); // 500 Internal Server Error\n\n    res.json({\n      \"status-code\": 500,\n      message: \"No request body found\"\n    });\n  }\n};\n\nconst searchInBoards = async (req, res) => {\n  const searchTerm = req.query.searchTerm;\n\n  if (!searchTerm) {\n    return res.status(400).send(\"id is not valid\"); // Invalid ID length\n  } // read entire table\n\n\n  boardController.searchBoard(searchTerm).then(board => {\n    res.json(board);\n  }).catch(err => {\n    // Database call failed return 500 error\n    res.status(500); // 500 Internal Server Error\n\n    res.json({\n      \"status-code\": 500,\n      message: err || \"failed request\"\n    });\n  });\n}; // Routes\n\n\nrouter.post(\"/add\", addBoard);\nrouter.post(\"/add-post\", addPost); // example: localhost:3000/board/all\n\nrouter.get(\"/all\", getAllBoards); // example: localhost:3000/board/one?id=1b29376f-71d3-4c54-875c-cc1898a55819\n\nrouter.get(\"/one\", getOneBoard);\nrouter.get(\"/search\", searchInBoards); // Export user router\n\nmodule.exports = router;","map":{"version":3,"sources":["/Users/kurtiscruz/Desktop/GitHub/CS5610-Final_Project_COVI-FORUM/coviforum/server/routes/board.route.js"],"names":["express","require","boardController","locationController","Board","Post","router","Router","helper","addBoard","req","res","body","userId","length","status","send","idExists","doesUserExistByUserId","tags","JSON","parse","error","console","board","subject","post","id","message","posts","push","then","json","catch","err","getAllBoards","readBoards","boards","getOneBoard","query","doesBoardExistByBoardId","readBoard","addPost","boardId","location","long","lat","addLocation","searchInBoards","searchTerm","searchBoard","get","module","exports"],"mappings":"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","sourcesContent":["const express = require(\"express\");\nconst boardController = require(\"../controllers/board.controller\");\nconst locationController = require(\"../controllers/location.controller\");\nconst Board = require(\"../models/board\");\nconst Post = require(\"../models/msgs\");\nconst router = express.Router();\nconst helper = require(\"./helper\");\n\nconst addBoard = async (req, res) => {\n  if (req && req.body) {\n    // Do more validation -> check if userId exists\n    if (\n      !req.body.userId ||\n      (req.body.userId && req.body.userId.length !== 36)\n    ) {\n      return res.status(400).send(\"UserId is not valid\"); // Invalid ID length\n    } else {\n      const idExists = await helper.doesUserExistByUserId(req.body.userId);\n      if (!idExists) {\n        return res.status(400).send(\"UserId is not valid\"); // ID doesn't exist\n      }\n    }\n\n    let tags = [];\n    if (req.body.tags) {\n      try {\n        tags = JSON.parse(req.body.tags);\n      } catch (error) {\n        console.error(\"Failed to parse tags\", req.body.tags);\n      }\n    }\n\n    // Create board object\n    const board = new Board(req.body.subject, req.body.userId, tags);\n\n    // create first post\n    const post = new Post(board.id, req.body.message || \"\", req.body.userId);\n\n    // push post into board\n    board.posts.push(post);\n\n    // Add user and return the added user\n    boardController\n      .addBoard(board)\n      .then((board) => {\n        res.json(board);\n      })\n      .catch((err) => {\n        // Failed to add board\n        res.status(500); // 500 Internal Server Error\n        res.json({\n          \"status-code\": 500,\n          message: err || \"failed to add board\",\n        });\n      });\n  } else {\n    // No form data found\n    res.status(500); // 500 Internal Server Error\n    res.json({\n      \"status-code\": 500,\n      message: \"No request body found\",\n    });\n  }\n};\n\nconst getAllBoards = (req, res) => {\n  // read entire table\n  boardController\n    .readBoards()\n    .then((boards) => {\n      res.json(boards);\n    })\n    .catch((err) => {\n      // Database call failed return 500 error\n      res.status(500); // 500 Internal Server Error\n      res.json({\n        \"status-code\": 500,\n        message: err || \"failed request\",\n      });\n    });\n};\n\nconst getOneBoard = async (req, res) => {\n  const id = req.query.id;\n\n  if (!id || id.length !== 36) {\n    return res.status(400).send(\"id is not valid\"); // Invalid ID length\n  } else {\n    const idExists = await helper.doesBoardExistByBoardId(id);\n    if (!idExists) {\n      return res.status(400).send(\"id is not valid\"); // ID doesn't exist\n    }\n  }\n\n  // read entire table\n  boardController\n    .readBoard(id)\n    .then((board) => {\n      res.json(board);\n    })\n    .catch((err) => {\n      // Database call failed return 500 error\n      res.status(500); // 500 Internal Server Error\n      res.json({\n        \"status-code\": 500,\n        message: err || \"failed request\",\n      });\n    });\n};\n\nconst addPost = async (req, res) => {\n  if (req && req.body) {\n    // Do more validation -> check if userId exists\n    if (\n      !req.body.userId ||\n      (req.body.userId && req.body.userId.length !== 36)\n    ) {\n      return res.status(400).send(\"UserId is not valid\"); // Invalid ID length\n    } else {\n      const idExists = await helper.doesUserExistByUserId(req.body.userId);\n      if (!idExists) {\n        return res.status(400).send(\"UserId is not valid\"); // ID doesn't exist\n      }\n    }\n\n    // Do more validation -> check if boardID exists\n    if (\n      !req.body.boardId ||\n      (req.body.userId && req.body.userId.length !== 36)\n    ) {\n      return res.status(400).send(\"boardID is not valid\"); // Invalid ID length\n    } else {\n      const idExists = await helper.doesBoardExistByBoardId(\n        req.body.boardId\n      );\n      if (!idExists) {\n        return res.status(400).send(\"boardID is not valid\"); // ID doesn't exist\n      }\n    }\n\n    // insert location in location database\n    if (req.body.location) {\n      try {\n        const location = JSON.parse(req.body.location);\n        if (location && location.long && location.lat) {\n          await locationController.addLocation(location.long, location.lat);\n        }\n      } catch (error) {\n        console.error(\"Failed to parse location\");\n      }\n    }\n\n    // Create post object\n    const post = new Post(\n      req.body.boardId,\n      req.body.message || \"\",\n      req.body.userId\n    );\n\n    // Add user and return the added user\n    boardController\n      .addPost(post)\n      .then((post) => {\n        res.json(post);\n      })\n      .catch((err) => {\n        // Failed to add Post\n        res.status(500); // 500 Internal Server Error\n        res.json({\n          \"status-code\": 500,\n          message: err || \"failed to add post\",\n        });\n      });\n  } else {\n    // No form data found\n    res.status(500); // 500 Internal Server Error\n    res.json({\n      \"status-code\": 500,\n      message: \"No request body found\",\n    });\n  }\n};\n\nconst searchInBoards = async (req, res) => {\n  const searchTerm = req.query.searchTerm;\n\n  if (!searchTerm) {\n    return res.status(400).send(\"id is not valid\"); // Invalid ID length\n  }\n\n  // read entire table\n  boardController\n    .searchBoard(searchTerm)\n    .then((board) => {\n      res.json(board);\n    })\n    .catch((err) => {\n      // Database call failed return 500 error\n      res.status(500); // 500 Internal Server Error\n      res.json({\n        \"status-code\": 500,\n        message: err || \"failed request\",\n      });\n    });\n};\n\n// Routes\nrouter.post(\"/add\", addBoard);\n\nrouter.post(\"/add-post\", addPost);\n\n// example: localhost:3000/board/all\nrouter.get(\"/all\", getAllBoards);\n\n// example: localhost:3000/board/one?id=1b29376f-71d3-4c54-875c-cc1898a55819\nrouter.get(\"/one\", getOneBoard);\n\nrouter.get(\"/search\", searchInBoards);\n\n// Export user router\nmodule.exports = router;\n"]},"metadata":{},"sourceType":"script"}