{"ast":null,"code":"const helper = require(\"./helper\");\n\nconst express = require(\"express\");\n\nconst userController = require(\"../controllers/user.controller\");\n\nconst threadController = require(\"../controllers/thread.controller\");\n\nconst User = require(\"../models/user\");\n\nconst router = express.Router(); // SOURCE: https://dev.to/anilsingh/create-use-helper-functions-react-component-1jhj\n// Above source helped develop this\n// Account for Users\n\nconst getStats = async (req, res) => {\n  // Use Promise\n  // Access db\n  const promises = [userController.getAmountOfUsers(), threadController.getAmountOfBoards(), threadController.getAmountOfMsgs()];\n\n  try {\n    const result = await Promise.all(promises);\n    let json = {};\n\n    if (result && result.length) {\n      for (let item of result) {\n        const k = Object.keys(item);\n\n        for (let i = 0; i < k.length; i++) {\n          json[k[i]] = item[k[i]];\n        }\n      }\n    }\n\n    res.json(json);\n  } catch (error) {\n    res.status(500);\n    res.json({\n      \"status-code\": 500,\n      message: \"ERROR: Request failed with error 500.. Refresh browser and try again.\"\n    });\n  }\n};\n\nconst register = (req, res) => {\n  if (req && req.body) {\n    if (!req.body.name || !req.body.email || !req.body.hashed_password) {\n      return res.status(400).send(\"ALL Fields must be filled to register.\");\n    } // Create user object from the POST body\n\n\n    const newUser = User.from(req.body);\n    console.log(\"newUser\", newUser); // Check if the email is used already\n\n    helper.doesUserExist(newUser.email).then(() => {\n      // Add user and return the added user\n      userController.addUser(newUser).then(users => {\n        res.json(users);\n      }).catch(err => {\n        // Failed to add user\n        res.status(500); // 500 Internal Server Error\n\n        res.json({\n          \"status-code\": 500,\n          message: err || \"failed to register\"\n        });\n      });\n    }).catch(err => {\n      res.status(202);\n      res.send(err);\n    });\n  } else {\n    // No form data found\n    res.status(500); // 500 Internal Server Error\n\n    res.json({\n      \"status-code\": 500,\n      message: \"No request body found\"\n    });\n  }\n};\n\nconst login = (req, res) => {\n  if (req && req.body) {\n    // Check if all fields are set\n    if (!req.body.email || !req.body.password) {\n      return res.status(400).send(\"One of the required fields is not set\");\n    }\n\n    const email = req.body.email;\n    const hashed_password = req.body.password;\n    userController.readUser({\n      email,\n      hashed_password\n    }).then(doc => {\n      if (doc && doc.length && doc.length > 0) {\n        res.json(doc[0]);\n      } else {\n        res.status(202);\n        res.send(\"User not found. Please check your password..\");\n      }\n    }).catch(() => {\n      res.status(500);\n      res.json({\n        \"status-code\": 500,\n        message: \"User not found. Please check your User Name and try again..\"\n      });\n    });\n  } else {\n    res.status(500);\n    res.json({\n      \"status-code\": 500,\n      message: \"Request failed with error 500. Please refresh your browser and try again\"\n    });\n  }\n};\n\nrouter.post(\"/register\", register);\nrouter.post(\"/login\", login); // Export user router\n\nmodule.exports = router;","map":{"version":3,"sources":["/Users/kurtiscruz/Desktop/GitHub/CS5610-Final_Project_COVI-FORUM/coviforum/server/routes/account.route.js"],"names":["helper","require","express","userController","threadController","User","router","Router","getStats","req","res","promises","getAmountOfUsers","getAmountOfBoards","getAmountOfMsgs","result","Promise","all","json","length","item","k","Object","keys","i","error","status","message","register","body","name","email","hashed_password","send","newUser","from","console","log","doesUserExist","then","addUser","users","catch","err","login","password","readUser","doc","post","module","exports"],"mappings":"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","sourcesContent":["const helper = require(\"./helper\");\nconst express = require(\"express\");\nconst userController = require(\"../controllers/user.controller\");\nconst threadController = require(\"../controllers/thread.controller\");\nconst User = require(\"../models/user\");\nconst router = express.Router();\n// SOURCE: https://dev.to/anilsingh/create-use-helper-functions-react-component-1jhj\n// Above source helped develop this\n// Account for Users\nconst getStats = async (req, res) => {\n// Use Promise\n// Access db\n  const promises = [\n    userController.getAmountOfUsers(),\n    threadController.getAmountOfBoards(),\n    threadController.getAmountOfMsgs(),\n  ];\n  try {\n    const result = await Promise.all(promises);\n    let json = {};\n    if (result && result.length) {\n      for (let item of result) {\n        const k = Object.keys(item);\n        for (let i = 0; i < k.length; i++) {\n          json[k[i]] = item[k[i]];\n        }\n      }\n    }\n    res.json(json);\n  } catch (error) {\n    res.status(500);\n    res.json({\n      \"status-code\": 500,\n      message: \"ERROR: Request failed with error 500.. Refresh browser and try again.\",\n    });\n  }\n};\n\n\nconst register = (req, res) => {\n  if (req && req.body) {\n    if (!req.body.name || !req.body.email || !req.body.hashed_password) {\n      return res.status(400).send(\"ALL Fields must be filled to register.\");\n    }\n\n    // Create user object from the POST body\n    const newUser = User.from(req.body);\n    console.log(\"newUser\", newUser);\n    // Check if the email is used already\n    helper\n      .doesUserExist(newUser.email)\n      .then(() => {\n        // Add user and return the added user\n        userController\n          .addUser(newUser)\n          .then((users) => {\n            res.json(users);\n          })\n          .catch((err) => {\n            // Failed to add user\n            res.status(500); // 500 Internal Server Error\n            res.json({\n              \"status-code\": 500,\n              message: err || \"failed to register\",\n            });\n          });\n      })\n      .catch((err) => {\n        res.status(202);\n        res.send(err);\n      });\n  } else {\n    // No form data found\n    res.status(500); // 500 Internal Server Error\n    res.json({\n      \"status-code\": 500,\n      message: \"No request body found\",\n    });\n  }\n};\n\nconst login = (req, res) => {\n  if (req && req.body) {\n    // Check if all fields are set\n    if (!req.body.email || !req.body.password) {\n      return res.status(400).send(\"One of the required fields is not set\");\n    }\n\n    const email = req.body.email;\n    const hashed_password = req.body.password;\n\n    userController\n      .readUser({ email, hashed_password })\n      .then((doc) => {\n        if (doc && doc.length && doc.length > 0) {\n          res.json(doc[0]);\n        } else {\n          res.status(202);\n          res.send(\"User not found. Please check your password..\");\n        }\n      })\n      .catch(() => {\n        res.status(500);\n        res.json({\n          \"status-code\": 500,\n          message: \"User not found. Please check your User Name and try again..\",\n        });\n      });\n  } else {\n    res.status(500);     res.json({\n      \"status-code\": 500,\n      message: \"Request failed with error 500. Please refresh your browser and try again\",\n    });\n  }\n};\nrouter.post(\"/register\", register);\nrouter.post(\"/login\", login);\n\n// Export user router\nmodule.exports = router;\n"]},"metadata":{},"sourceType":"script"}