{"ast":null,"code":"var _jsxFileName = \"/Users/kurtiscruz/Desktop/GitHub/CS5610-Final_Project_COVI-FORUM/coviforum/src/pages/mainboard/index.js\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./feed.css\";\nimport { getAllThreads, searchAllThreads } from \"../../api/thread\";\nimport ThreadList from \"../../components/thread-list\";\nimport Loader from \"react-loader-spinner\";\nimport PageHead from \"../../components/page-head\";\nimport { Link } from \"react-router-dom\";\nimport SearchBar from \"../../components/search-bar\";\nimport ReactPaginate from \"react-paginate\";\n\nconst Feed = props => {\n  const [threads, setThreads] = useState([]);\n  const [searchThreads, setSearchThreads] = useState([]);\n  const [visibleThreads, setVisibleThreads] = useState([]);\n  const [dataAvailable, setDataAvailable] = useState(false);\n  const [searchDone, setSearchDone] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [currentPage, setCurrentPage] = useState(0);\n  const PER_PAGE = 10;\n  const offset = currentPage * PER_PAGE;\n\n  const triggerSearch = () => {\n    if (searchTerm !== \"\") {\n      onSearch(searchTerm);\n    } else {\n      setSearchThreads(threads);\n    }\n  };\n\n  useEffect(() => {\n    if (searchThreads.length > 0) {\n      // search list\n      const currentPageData = searchThreads.slice(offset, offset + PER_PAGE);\n      setVisibleThreads(currentPageData);\n    } else {\n      const currentPageData = threads.slice(offset, offset + PER_PAGE);\n      setVisibleThreads(currentPageData);\n    }\n  }, [threads, searchThreads, offset]);\n\n  function handlePageClick({\n    selected: selectedPage\n  }) {\n    setCurrentPage(selectedPage);\n  }\n\n  useEffect(() => {\n    getAllThreads().then(response => {\n      // Insert users\n      setThreads(response.data); // Let UI know that the users are available\n\n      setDataAvailable(true);\n    }).catch(err => {\n      // TODO: Show error message\n      console.error(\"Failed to get all threads\", err);\n    });\n  }, []);\n\n  const onSearch = term => {\n    setDataAvailable(false);\n    searchAllThreads(term).then(response => {\n      // Insert users\n      setSearchThreads(response.data); // Let UI know that the users are available\n\n      setDataAvailable(true);\n      setSearchDone(true); // update the pagination\n    }).catch(err => {\n      // TODO: Show error message\n      console.error(\"Failed to get all threads\", err);\n    });\n  };\n\n  const resetSearch = () => {\n    setSearchTerm(\"\");\n    setSearchThreads([]);\n    setSearchDone(false);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"feed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(PageHead, {\n    className: \"title\",\n    title: \"Home\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, // Show loader until we load the user list\n  dataAvailable ? /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ReactPaginate, {\n    previousLabel: \"← Previous\",\n    nextLabel: \"Next →\",\n    pageCount: Math.ceil((searchThreads.length > 0 ? searchThreads.length : threads.length) / PER_PAGE),\n    onPageChange: handlePageClick,\n    containerClassName: \"pagination\",\n    previousLinkClassName: \"pagination__link\",\n    nextLinkClassName: \"pagination__link\",\n    disabledClassName: \"pagination__link--disabled\",\n    activeClassName: \"pagination__link--active\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(ThreadList, {\n    threads: visibleThreads,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(ReactPaginate, {\n    previousLabel: \"← Previous\",\n    nextLabel: \"Next →\",\n    pageCount: Math.ceil((searchThreads.length > 0 ? searchThreads.length : threads.length) / PER_PAGE),\n    onPageChange: handlePageClick,\n    containerClassName: \"pagination\",\n    previousLinkClassName: \"pagination__link\",\n    nextLinkClassName: \"pagination__link\",\n    disabledClassName: \"pagination__link--disabled\",\n    activeClassName: \"pagination__link--active\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 15\n    }\n  })) : /*#__PURE__*/React.createElement(Loader, {\n    type: \"Puff\",\n    color: \"#4f5d75\",\n    height: 100,\n    width: 100,\n    className: \"loader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"aside\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    to: \"/thread/new_thread\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"create-new-thread\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 11\n    }\n  }, \"Create new thread\")), /*#__PURE__*/React.createElement(SearchBar, {\n    value: searchTerm,\n    search: triggerSearch,\n    onSearch: setSearchTerm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }\n  }), searchDone ? /*#__PURE__*/React.createElement(\"button\", {\n    onClick: resetSearch,\n    className: \"search-info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 11\n    }\n  }, searchThreads.length > 0 ? \"Reset search\" : \"No threads found\") : \"\"));\n};\n\nexport default Feed;","map":{"version":3,"sources":["/Users/kurtiscruz/Desktop/GitHub/CS5610-Final_Project_COVI-FORUM/coviforum/src/pages/mainboard/index.js"],"names":["React","useEffect","useState","getAllThreads","searchAllThreads","ThreadList","Loader","PageHead","Link","SearchBar","ReactPaginate","Feed","props","threads","setThreads","searchThreads","setSearchThreads","visibleThreads","setVisibleThreads","dataAvailable","setDataAvailable","searchDone","setSearchDone","searchTerm","setSearchTerm","currentPage","setCurrentPage","PER_PAGE","offset","triggerSearch","onSearch","length","currentPageData","slice","handlePageClick","selected","selectedPage","then","response","data","catch","err","console","error","term","resetSearch","Math","ceil"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./feed.css\";\nimport { getAllThreads, searchAllThreads } from \"../../api/thread\";\nimport ThreadList from \"../../components/thread-list\";\nimport Loader from \"react-loader-spinner\";\nimport PageHead from \"../../components/page-head\";\nimport { Link } from \"react-router-dom\";\nimport SearchBar from \"../../components/search-bar\";\nimport ReactPaginate from \"react-paginate\";\n\nconst Feed = (props) => {\n  const [threads, setThreads] = useState([]);\n  const [searchThreads, setSearchThreads] = useState([]);\n  const [visibleThreads, setVisibleThreads] = useState([]);\n\n  const [dataAvailable, setDataAvailable] = useState(false);\n  const [searchDone, setSearchDone] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [currentPage, setCurrentPage] = useState(0);\n\n  const PER_PAGE = 10;\n  const offset = currentPage * PER_PAGE;\n\n  const triggerSearch = () => {\n    if (searchTerm !== \"\") {\n      onSearch(searchTerm);\n    } else {\n      setSearchThreads(threads);\n    }\n  };\n\n  useEffect(() => {\n    if (searchThreads.length > 0) {\n      // search list\n      const currentPageData = searchThreads.slice(offset, offset + PER_PAGE);\n      setVisibleThreads(currentPageData);\n    } else {\n      const currentPageData = threads.slice(offset, offset + PER_PAGE);\n      setVisibleThreads(currentPageData);\n    }\n  }, [threads, searchThreads, offset]);\n\n  function handlePageClick({ selected: selectedPage }) {\n    setCurrentPage(selectedPage);\n  }\n\n  useEffect(() => {\n    getAllThreads()\n      .then((response) => {\n        // Insert users\n        setThreads(response.data);\n\n        // Let UI know that the users are available\n        setDataAvailable(true);\n      })\n      .catch((err) => {\n        // TODO: Show error message\n        console.error(\"Failed to get all threads\", err);\n      });\n  }, []);\n\n  const onSearch = (term) => {\n    setDataAvailable(false);\n    searchAllThreads(term)\n      .then((response) => {\n        // Insert users\n        setSearchThreads(response.data);\n\n        // Let UI know that the users are available\n        setDataAvailable(true);\n        setSearchDone(true);\n\n        // update the pagination\n      })\n      .catch((err) => {\n        // TODO: Show error message\n        console.error(\"Failed to get all threads\", err);\n      });\n  };\n\n  const resetSearch = () => {\n    setSearchTerm(\"\");\n    setSearchThreads([]);\n    setSearchDone(false);\n  };\n\n  return (\n    <div className=\"feed\">\n      <PageHead className=\"title\" title=\"Home\" />\n\n      <div className=\"container\">\n        {\n          // Show loader until we load the user list\n          dataAvailable ? (\n            <React.Fragment>\n              <ReactPaginate\n                previousLabel={\"← Previous\"}\n                nextLabel={\"Next →\"}\n                pageCount={Math.ceil(\n                  (searchThreads.length > 0\n                    ? searchThreads.length\n                    : threads.length) / PER_PAGE\n                )}\n                onPageChange={handlePageClick}\n                containerClassName={\"pagination\"}\n                previousLinkClassName={\"pagination__link\"}\n                nextLinkClassName={\"pagination__link\"}\n                disabledClassName={\"pagination__link--disabled\"}\n                activeClassName={\"pagination__link--active\"}\n              />\n              <ThreadList threads={visibleThreads} />\n              <ReactPaginate\n                previousLabel={\"← Previous\"}\n                nextLabel={\"Next →\"}\n                pageCount={Math.ceil(\n                  (searchThreads.length > 0\n                    ? searchThreads.length\n                    : threads.length) / PER_PAGE\n                )}\n                onPageChange={handlePageClick}\n                containerClassName={\"pagination\"}\n                previousLinkClassName={\"pagination__link\"}\n                nextLinkClassName={\"pagination__link\"}\n                disabledClassName={\"pagination__link--disabled\"}\n                activeClassName={\"pagination__link--active\"}\n              />\n            </React.Fragment>\n          ) : (\n            <Loader\n              type=\"Puff\"\n              color=\"#4f5d75\"\n              height={100}\n              width={100}\n              className=\"loader\"\n            />\n          )\n        }\n      </div>\n\n      <div className=\"aside\">\n        <Link to=\"/thread/new_thread\">\n          <div className=\"create-new-thread\">Create new thread</div>\n        </Link>\n        <SearchBar\n          value={searchTerm}\n          search={triggerSearch}\n          onSearch={setSearchTerm}\n        />\n        {searchDone ? (\n          <button onClick={resetSearch} className=\"search-info\">\n            {searchThreads.length > 0 ? \"Reset search\" : \"No threads found\"}\n          </button>\n        ) : (\n          \"\"\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Feed;\n"]},"metadata":{},"sourceType":"module"}