{"ast":null,"code":"const MongoClient = require(\"mongodb\").MongoClient;\n\nconst config = require(\"./config\"); // Guide: https://dzone.com/articles/crud-operations-on-mongodb-thru-nodejs\n\n\nlet database;\n\nconst mongoDb = (uri, dbName) => {\n  const currentMongo = {}; // Mongo db options\n\n  const options = {\n    useNewUrlParser: true,\n    useUnifiedTopology: true\n  }; // Create new client with options\n  // the uri is gotten from the config file or env. variables\n\n  currentMongo.client = new MongoClient(uri, options); // return the promise of the db connection\n\n  return new Promise(resolve => {\n    currentMongo.client.connect(err => {\n      if (err) throw err;\n      currentMongo.connection = currentMongo.client.db(dbName);\n      console.log(\"Successfully connected to mongo client!\");\n      resolve(currentMongo);\n    });\n  });\n}; // Initialize the database\n// This will be called before we start listening to express server\n\n\nconst initConnection = () => {\n  return new Promise(resolve => {\n    // Get uri from the config\n    const uri = config.mongo.uri; // connect to our forum DB\n\n    mongoDb(uri, \"forum\").then(db => {\n      database = db; // Resolve the connection\n\n      resolve();\n    });\n  });\n}; // Return the database\n// This will be used in the controllers\n\n\nconst getDatabase = () => {\n  return database;\n}; // Export the init and the database connection\n\n\nmodule.exports = {\n  initConnection,\n  getDatabase\n};","map":{"version":3,"sources":["/Users/kurtiscruz/Desktop/GitHub/CS5610-Final_Project_COVI-FORUM/coviforum/server/configs/mongoClient.js"],"names":["MongoClient","require","config","database","mongoDb","uri","dbName","currentMongo","options","useNewUrlParser","useUnifiedTopology","client","Promise","resolve","connect","err","connection","db","console","log","initConnection","mongo","then","getDatabase","module","exports"],"mappings":"AAAA,MAAMA,WAAW,GAAGC,OAAO,CAAC,SAAD,CAAP,CAAmBD,WAAvC;;AACA,MAAME,MAAM,GAAGD,OAAO,CAAC,UAAD,CAAtB,C,CAEA;;;AAEA,IAAIE,QAAJ;;AAEA,MAAMC,OAAO,GAAG,CAACC,GAAD,EAAMC,MAAN,KAAiB;AAC/B,QAAMC,YAAY,GAAG,EAArB,CAD+B,CAG/B;;AACA,QAAMC,OAAO,GAAG;AACdC,IAAAA,eAAe,EAAE,IADH;AAEdC,IAAAA,kBAAkB,EAAE;AAFN,GAAhB,CAJ+B,CAS/B;AACA;;AACAH,EAAAA,YAAY,CAACI,MAAb,GAAsB,IAAIX,WAAJ,CAAgBK,GAAhB,EAAqBG,OAArB,CAAtB,CAX+B,CAa/B;;AACA,SAAO,IAAII,OAAJ,CAAaC,OAAD,IAAa;AAC9BN,IAAAA,YAAY,CAACI,MAAb,CAAoBG,OAApB,CAA6BC,GAAD,IAAS;AACnC,UAAIA,GAAJ,EAAS,MAAMA,GAAN;AACTR,MAAAA,YAAY,CAACS,UAAb,GAA0BT,YAAY,CAACI,MAAb,CAAoBM,EAApB,CAAuBX,MAAvB,CAA1B;AAEAY,MAAAA,OAAO,CAACC,GAAR,CAAY,yCAAZ;AACAN,MAAAA,OAAO,CAACN,YAAD,CAAP;AACD,KAND;AAOD,GARM,CAAP;AASD,CAvBD,C,CAyBA;AACA;;;AACA,MAAMa,cAAc,GAAG,MAAM;AAC3B,SAAO,IAAIR,OAAJ,CAAaC,OAAD,IAAa;AAC9B;AACA,UAAMR,GAAG,GAAGH,MAAM,CAACmB,KAAP,CAAahB,GAAzB,CAF8B,CAG9B;;AACAD,IAAAA,OAAO,CAACC,GAAD,EAAM,OAAN,CAAP,CAAsBiB,IAAtB,CAA4BL,EAAD,IAAQ;AACjCd,MAAAA,QAAQ,GAAGc,EAAX,CADiC,CAEjC;;AACAJ,MAAAA,OAAO;AACR,KAJD;AAKD,GATM,CAAP;AAUD,CAXD,C,CAaA;AACA;;;AACA,MAAMU,WAAW,GAAG,MAAM;AACxB,SAAOpB,QAAP;AACD,CAFD,C,CAIA;;;AACAqB,MAAM,CAACC,OAAP,GAAiB;AAAEL,EAAAA,cAAF;AAAkBG,EAAAA;AAAlB,CAAjB","sourcesContent":["const MongoClient = require(\"mongodb\").MongoClient;\nconst config = require(\"./config\");\n\n// Guide: https://dzone.com/articles/crud-operations-on-mongodb-thru-nodejs\n\nlet database;\n\nconst mongoDb = (uri, dbName) => {\n  const currentMongo = {};\n\n  // Mongo db options\n  const options = {\n    useNewUrlParser: true,\n    useUnifiedTopology: true,\n  };\n\n  // Create new client with options\n  // the uri is gotten from the config file or env. variables\n  currentMongo.client = new MongoClient(uri, options);\n\n  // return the promise of the db connection\n  return new Promise((resolve) => {\n    currentMongo.client.connect((err) => {\n      if (err) throw err;\n      currentMongo.connection = currentMongo.client.db(dbName);\n\n      console.log(\"Successfully connected to mongo client!\");\n      resolve(currentMongo);\n    });\n  });\n};\n\n// Initialize the database\n// This will be called before we start listening to express server\nconst initConnection = () => {\n  return new Promise((resolve) => {\n    // Get uri from the config\n    const uri = config.mongo.uri;\n    // connect to our forum DB\n    mongoDb(uri, \"forum\").then((db) => {\n      database = db;\n      // Resolve the connection\n      resolve();\n    });\n  });\n};\n\n// Return the database\n// This will be used in the controllers\nconst getDatabase = () => {\n  return database;\n};\n\n// Export the init and the database connection\nmodule.exports = { initConnection, getDatabase };\n"]},"metadata":{},"sourceType":"script"}