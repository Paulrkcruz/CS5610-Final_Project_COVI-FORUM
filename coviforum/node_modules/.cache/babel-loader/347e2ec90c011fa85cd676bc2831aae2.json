{"ast":null,"code":"// Message Board Controller\n// Setup models, config for MongoDB\nconst Board = require(\"../models/board\");\n\nconst mongoClient = require(\"../configs/mongoClient\");\n\nconst readBoards = searchTerm => {\n  return new Promise((resolve, reject) => {\n    //SOURCE: https://css-tricks.com/build-a-chat-app-using-react-hooks-in-100-lines-of-code/\n    // The above source helped structure the board controller\n    // Create query\n    const query = [{\n      $lookup: {\n        from: \"user\",\n        localField: \"userId\",\n        foreignField: \"id\",\n        as: \"user\"\n      }\n    }, {\n      $unwind: \"$user\"\n    }, {\n      $project: {\n        count: {\n          $cond: {\n            if: {\n              $isArray: \"$msgs\"\n            },\n            then: {\n              $size: \"$msgs\"\n            },\n            else: \"NA\"\n          }\n        },\n        msg: {\n          $arrayElemAt: [\"$msgs\", 0]\n        },\n        user: {\n          name: 1,\n          id: 1\n        },\n        subject: 1,\n        created: 1,\n        active: 1,\n        userId: 1,\n        id: 1,\n        tags: 1,\n        _id: 0\n      }\n    }];\n\n    if (searchTerm) {\n      query.unshift({\n        $match: {\n          $text: {\n            $search: searchTerm\n          }\n        }\n      });\n    } // Sort in reverse order\n\n\n    mongoClient.getDatabase().connection.collection(\"board\").aggregate(query).sort({\n      created: -1\n    }).toArray((err, docs) => {\n      if (err) {\n        console.error(\"ERROR: Failed to read board data from MongoDB\", err);\n        reject(\"ERROR: Failed to read board data from MongoDB. Please refresh your browser\");\n      } else {\n        resolve(docs);\n      }\n    });\n  });\n}; // MongoDB\n// Merge collections: https://www.pluralsight.com/guides/merge-properties-of-array-elements-with-reactjs\n\n\nconst readBoard = id => {\n  return new Promise((resolve, reject) => {\n    mongoClient.getDatabase().connection.collection(\"board\").aggregate([{\n      $match: {\n        id: id\n      }\n    }, {\n      $lookup: {\n        from: \"user\",\n        localField: \"userId\",\n        foreignField: \"id\",\n        as: \"user\"\n      }\n    }, {\n      $unwind: \"$user\"\n    }, {\n      $project: {\n        _id: 0,\n        userId: 0,\n        user: {\n          _id: 0,\n          active: 0,\n          hashed_password: 0,\n          updated: 0,\n          email: 0\n        },\n        \"msgs.boardId\": 0,\n        \"msgs.id\": 0\n      }\n    }, {\n      $unwind: \"$msgs\"\n    }, {\n      $lookup: {\n        from: \"user\",\n        localField: \"msgs.userId\",\n        foreignField: \"id\",\n        as: \"msgs.user\"\n      }\n    }, {\n      $project: {\n        \"msgs.user\": {\n          _id: 0,\n          active: 0,\n          hashed_password: 0,\n          updated: 0,\n          email: 0\n        }\n      }\n    }, {\n      $group: {\n        _id: \"$_id\",\n        root: {\n          $mergeObjects: \"$$ROOT\"\n        },\n        msgs: {\n          $push: \"$msgs\"\n        }\n      }\n    }, {\n      $replaceRoot: {\n        newRoot: {\n          $mergeObjects: [\"$root\", \"$$ROOT\"]\n        }\n      }\n    }, {\n      $project: {\n        root: 0,\n        \"msgs.userId\": 0,\n        _id: 0\n      }\n    }]).toArray((err, docs) => {\n      if (err) {\n        console.error(\"ERROR: Failed to read board data from MongoDB\", err);\n        reject(\"ERROR: Failed to read board data from MongoDB. Please refresh your browser\");\n      } else {\n        resolve(docs);\n      }\n    });\n  });\n};\n\nconst addBoard = board => {\n  return new Promise((resolve, reject) => {\n    mongoClient.getDatabase().connection.collection(\"board\").insertOne(board).then((result, err) => {\n      if (err) {\n        console.error(\"ERROR: Failed to read board data from MongoDB\", err);\n        reject(\"ERROR: Failed to read board data from MongoDB. Please refresh your browser\");\n      } else {\n        if (result.ops && result.ops.length && result.ops.length > 0) {\n          const board = Board.from(result.ops[0]);\n          resolve(board);\n        } else {\n          resolve(undefined);\n        }\n      }\n    });\n  });\n};\n\nconst addMsg = msg => {\n  return new Promise((resolve, reject) => {\n    mongoClient.getDatabase().connection.collection(\"board\").updateOne({\n      id: msg.boardId\n    }, {\n      $push: {\n        msgs: msg\n      }\n    }).then((result, err) => {\n      if (err) {\n        console.error(\"ERROR: Failed to read board data from MongoDB. Please refresh your browser\", err);\n        reject(\"ERROR: Failed to read board data from MongoDB. Please refresh your browser\");\n      } else {\n        if (result && result.result && result.result.ok > 0) {\n          resolve(msg);\n        } else {\n          resolve(undefined);\n        }\n      }\n    });\n  });\n}; // Check ID of Msg Board\n// use Promise\n\n\nconst checkBoardID = id => {\n  return new Promise((resolve, reject) => {\n    mongoClient.getDatabase().connection.collection(\"board\").find(id, {\n      projection: {\n        _id: 0,\n        msgs: 0\n      }\n    }).toArray((err, docs) => {\n      if (err) {\n        console.error(\"ERROR: Failed to read board data from MongoDB. Please refresh your browser\", err);\n        reject(err);\n      } else {\n        resolve(docs);\n      }\n    });\n  });\n};\n\nconst getAmountOfBoards = () => {\n  return new Promise((resolve, reject) => {\n    mongoClient.getDatabase().connection.collection(\"board\").countDocuments({}).then(count => {\n      resolve({\n        boardCount: count\n      });\n    }).catch(err => {\n      reject(err);\n    });\n  });\n};\n\nconst getAmountOfMsgs = () => {\n  return new Promise((resolve, reject) => {\n    mongoClient.getDatabase().connection.collection(\"board\").aggregate([{\n      $project: {\n        _id: 0,\n        count: {\n          $size: \"$msgs\"\n        }\n      }\n    }, {\n      $group: {\n        _id: \"$_id\",\n        msgCount: {\n          $sum: \"$count\"\n        }\n      }\n    }, {\n      $project: {\n        _id: 0\n      }\n    }]).toArray((err, docs) => {\n      if (err) {\n        console.error(\"ERROR: Failed to read Msg data from MongoDB. Please refresh your browser\", err);\n        reject(\"ERROR: Failed to read Msg data from MongoDB. Please refresh your browser\");\n      } else {\n        if (docs && docs.length && docs.length > 0) {\n          resolve(docs[0]);\n        }\n      }\n    });\n  });\n};\n\nconst searchBoard = term => {\n  return readBoards(term);\n};\n\nmodule.exports = {\n  addBoard,\n  readBoards,\n  readBoard,\n  addMsg,\n  checkBoardID,\n  searchBoard,\n  getAmountOfMsgs,\n  getAmountOfBoards\n};","map":{"version":3,"sources":["/Users/kurtiscruz/Desktop/GitHub/CS5610-Final_Project_COVI-FORUM/coviforum/server/controllers/board.controller.js"],"names":["Board","require","mongoClient","readBoards","searchTerm","Promise","resolve","reject","query","$lookup","from","localField","foreignField","as","$unwind","$project","count","$cond","if","$isArray","then","$size","else","msg","$arrayElemAt","user","name","id","subject","created","active","userId","tags","_id","unshift","$match","$text","$search","getDatabase","connection","collection","aggregate","sort","toArray","err","docs","console","error","readBoard","hashed_password","updated","email","$group","root","$mergeObjects","msgs","$push","$replaceRoot","newRoot","addBoard","board","insertOne","result","ops","length","undefined","addMsg","updateOne","boardId","ok","checkBoardID","find","projection","getAmountOfBoards","countDocuments","boardCount","catch","getAmountOfMsgs","msgCount","$sum","searchBoard","term","module","exports"],"mappings":"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","sourcesContent":["// Message Board Controller\n// Setup models, config for MongoDB\nconst Board = require(\"../models/board\");\nconst mongoClient = require(\"../configs/mongoClient\");\nconst readBoards = (searchTerm) => {\n  return new Promise((resolve, reject) => {\n//SOURCE: https://css-tricks.com/build-a-chat-app-using-react-hooks-in-100-lines-of-code/\n// The above source helped structure the board controller\n// Create query\n    const query = [\n      {\n        $lookup: {\n          from: \"user\",\n          localField: \"userId\",\n          foreignField: \"id\",\n          as: \"user\",\n        },\n      },\n      {\n        $unwind: \"$user\",\n      },\n      {\n        $project: {\n          count: {\n            $cond: {\n              if: { $isArray: \"$msgs\" },\n              then: { $size: \"$msgs\" },\n              else: \"NA\",\n            },\n          },\n          msg: { $arrayElemAt: [\"$msgs\", 0] },\n          user: {\n            name: 1,\n            id: 1,\n          },\n          subject: 1,\n          created: 1,\n          active: 1,\n          userId: 1,\n          id: 1,\n          tags: 1,\n          _id: 0,\n        },\n      },\n    ];\n\n    if (searchTerm) {\n      query.unshift({ $match: { $text: { $search: searchTerm } } });\n    }\n    // Sort in reverse order\n    mongoClient\n      .getDatabase()\n      .connection.collection(\"board\")\n      .aggregate(query)\n      .sort({ created: -1 })\n      .toArray((err, docs) => {\n        if (err) {\n          console.error(\"ERROR: Failed to read board data from MongoDB\", err);\n          reject(\"ERROR: Failed to read board data from MongoDB. Please refresh your browser\");\n        } else {\n          resolve(docs);\n        }\n      });\n  });\n};\n// MongoDB\n// Merge collections: https://www.pluralsight.com/guides/merge-properties-of-array-elements-with-reactjs\nconst readBoard = (id) => {\n  return new Promise((resolve, reject) => {\n       mongoClient\n      .getDatabase()\n      .connection.collection(\"board\")\n      .aggregate([\n        { $match: { id: id } },\n        {\n          $lookup: {\n            from: \"user\",\n            localField: \"userId\",\n            foreignField: \"id\",\n            as: \"user\",\n          },\n        },\n        {\n          $unwind: \"$user\",\n        },\n        {\n          $project: {\n            _id: 0,\n            userId: 0,\n            user: {\n              _id: 0,\n              active: 0,\n              hashed_password: 0,\n              updated: 0,\n              email: 0,\n            },\n            \"msgs.boardId\": 0,\n            \"msgs.id\": 0,\n          },\n        },\n        {\n          $unwind: \"$msgs\",\n        },\n        {\n          $lookup: {\n            from: \"user\",\n            localField: \"msgs.userId\",\n            foreignField: \"id\",\n            as: \"msgs.user\",\n          },\n        },\n        {\n          $project: {\n            \"msgs.user\": {\n              _id: 0,\n              active: 0,\n              hashed_password: 0,\n              updated: 0,\n              email: 0,\n            },\n          },\n        },\n        {\n          $group: {\n            _id: \"$_id\",\n            root: { $mergeObjects: \"$$ROOT\" },\n            msgs: { $push: \"$msgs\" },\n          },\n        },\n        {\n          $replaceRoot: {\n            newRoot: {\n              $mergeObjects: [\"$root\", \"$$ROOT\"],\n            },\n          },\n        },\n        {\n          $project: {\n            root: 0,\n            \"msgs.userId\": 0,\n            _id: 0,\n          },\n        },\n      ])\n      .toArray((err, docs) => {\n        if (err) {\n          console.error(\"ERROR: Failed to read board data from MongoDB\", err);\n          reject(\"ERROR: Failed to read board data from MongoDB. Please refresh your browser\");\n        } else {\n          resolve(docs);\n        }\n      });\n  });\n};\n\nconst addBoard = (board) => {\n  return new Promise((resolve, reject) => {\n    mongoClient\n      .getDatabase()\n      .connection.collection(\"board\")\n      .insertOne(board)\n      .then((result, err) => {\n        if (err) {\n            console.error(\"ERROR: Failed to read board data from MongoDB\", err);\n            reject(\"ERROR: Failed to read board data from MongoDB. Please refresh your browser\");\n        } else {\n          if (result.ops && result.ops.length && result.ops.length > 0) {\n            const board = Board.from(result.ops[0]);\n            resolve(board);\n          } else {\n            resolve(undefined);\n          }\n        }\n      });\n  });\n};\n\nconst addMsg = (msg) => {\n  return new Promise((resolve, reject) => {\n    mongoClient\n      .getDatabase()\n      .connection.collection(\"board\")\n      .updateOne({ id: msg.boardId }, { $push: { msgs: msg } })\n      .then((result, err) => {\n        if (err) {\n          console.error(\"ERROR: Failed to read board data from MongoDB. Please refresh your browser\", err);\n          reject(\"ERROR: Failed to read board data from MongoDB. Please refresh your browser\");\n        } else {\n          if (result && result.result && result.result.ok > 0) {\n            resolve(msg);\n          } else {\n            resolve(undefined);\n          }\n        }\n      });\n  });\n};\n// Check ID of Msg Board\n// use Promise\nconst checkBoardID = (id) => {\n  return new Promise((resolve, reject) => {\n    mongoClient\n      .getDatabase()\n      .connection.collection(\"board\")\n      .find(id, {\n        projection: { _id: 0, msgs: 0 },\n      })\n      .toArray((err, docs) => {\n        if (err) {\n          console.error(\"ERROR: Failed to read board data from MongoDB. Please refresh your browser\", err);\n          reject(err);\n        } else {\n          resolve(docs);\n        }\n      });\n  });\n};\n\nconst getAmountOfBoards = () => {\n  return new Promise((resolve, reject) => {\n    mongoClient\n      .getDatabase()\n      .connection.collection(\"board\")\n      .countDocuments({})\n      .then((count) => {\n        resolve({ boardCount: count });\n      })\n      .catch((err) => {\n        reject(err);\n      });\n  });\n};\n\nconst getAmountOfMsgs = () => {\n  return new Promise((resolve, reject) => {\n    mongoClient\n      .getDatabase()\n      .connection.collection(\"board\")\n      .aggregate([\n        {\n          $project: {\n            _id: 0,\n            count: { $size: \"$msgs\" },\n          },\n        },\n        {\n          $group: {\n            _id: \"$_id\",\n            msgCount: { $sum: \"$count\" },\n          },\n        },\n        {\n          $project: {\n            _id: 0,\n          },\n        },\n      ])\n      .toArray((err, docs) => {\n        if (err) {\n          console.error(\"ERROR: Failed to read Msg data from MongoDB. Please refresh your browser\", err);\n          reject(\"ERROR: Failed to read Msg data from MongoDB. Please refresh your browser\");\n        } else {\n          if (docs && docs.length && docs.length > 0) {\n            resolve(docs[0]);\n          }\n        }\n      });\n  });\n};\n\nconst searchBoard = (term) => {\n  return readBoards(term);\n};\nmodule.exports = {\n  addBoard,\n  readBoards,\n  readBoard,\n  addMsg,\n  checkBoardID,\n  searchBoard,\n  getAmountOfMsgs,\n  getAmountOfBoards,\n};\n"]},"metadata":{},"sourceType":"script"}